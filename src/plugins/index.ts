import * as child_process from 'child_process';
import * as fs from 'fs';
import * as winston from 'winston';
import { HandelCodePipelineFile, PhaseDeployers, PipelinePlugins, PluginConfig } from '../datatypes/index';

const HANDEL_CODEPIPELINE_PLUGINS_DIR = './handel-codepipeline-plugins';

function createPackageJson(plugins: PipelinePlugins, pipelineName: string): void {
    const packageJsonFile: any = { // TODO - I can't find a type for a package.json file, and I don't want to write it myself
        name: `${pipelineName}-handel-codepipeline-plugins`,
        version: '1.0.0',
        private: true,
        description: 'Plugins for Handel-CodePipeline project',
        author: 'Auto-Generated by Handel',
        dependencies: {}
    };
    for (const pluginName in plugins) {
        if (plugins.hasOwnProperty(pluginName)) {
            const pluginConfig = plugins[pluginName];
            packageJsonFile.dependencies[pluginConfig.name] = pluginConfig.version;
        }
    }

    if (!fs.existsSync(HANDEL_CODEPIPELINE_PLUGINS_DIR)) {
        fs.mkdirSync(HANDEL_CODEPIPELINE_PLUGINS_DIR);
    }
    fs.writeFileSync(`${HANDEL_CODEPIPELINE_PLUGINS_DIR}/package.json`, JSON.stringify(packageJsonFile));
}

function loadPluginsFromNpm(plugins: PipelinePlugins, pipelineName: string): void {
    createPackageJson(plugins, pipelineName);
    child_process.execSync(`npm --prefix ${HANDEL_CODEPIPELINE_PLUGINS_DIR} install ${HANDEL_CODEPIPELINE_PLUGINS_DIR}`, { stdio: [0, 1, 2] });
}

function requirePluginPhaseDeployers(pluginConfig: PluginConfig): PhaseDeployers {
    const packageName = pluginConfig.name;
    // See https://github.com/c9/architect
    console.log(`${HANDEL_CODEPIPELINE_PLUGINS_DIR}/node_modules/${packageName}/index.js`);
    console.log(fs.existsSync(`${HANDEL_CODEPIPELINE_PLUGINS_DIR}/node_modules/${packageName}/index.js`));
    const pluginInitializer = require(`${HANDEL_CODEPIPELINE_PLUGINS_DIR}/node_modules/${packageName}/index.js`);
    return pluginInitializer.initializeHandelCodePipelinePlugin();
}

interface PluginPhaseDeployers {
    [pluginName: string]: PhaseDeployers;
}

export function loadPhaseDeployersFromPlugins(handelCodePipelineFile: HandelCodePipelineFile): PhaseDeployers {
    const plugins = handelCodePipelineFile.plugins;
    if (!plugins) { // No plugins defined, just return empty PhaseDeployers
        return {};
    }
    else {
        winston.info(`Loading Handel-CodePipeline plugins from NPM`);
        loadPluginsFromNpm(plugins, handelCodePipelineFile.name);
        winston.info(`Loaded Handel-CodePipeline plugins from NPM`);

        const allPluginPhaseDeployers: PluginPhaseDeployers = {};
        for (const pluginName in plugins) {
            if (plugins.hasOwnProperty(pluginName)) {
                allPluginPhaseDeployers[pluginName] = requirePluginPhaseDeployers(plugins[pluginName]);
            }
        }
        console.log(allPluginPhaseDeployers);
        return {};
    }
}
