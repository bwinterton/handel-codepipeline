---
AWSTemplateFormatVersion: '2010-09-09'
Description: Handel Worker Cluster
Parameters:
  NumInstances:
    Description: Number of instances in the cluster
    Type: Number
    Default: 1
  InstanceType:
    Description: The type of ec2 instances to use in the cluster
    Type: String
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    Default: t2.micro
  KeyName:
    Description: The ssh key to assign to the nodes in the cluster.
    Type: AWS::EC2::KeyPair::KeyName
  AmiImageId:
    Description: The AMI to use
    Type: String
  PrivateSubnets:
    Description: The list of private subnets in the VPC
    Type: CommaDelimitedList
  PublicSubnets:
    Description: The list of public subnets in the VPC
    Type: CommaDelimitedList
  VpcId:
    Description: The ID of the VPC in which you are running
    Type: String
  DataSubnets:
    Description: The list of data subnets in the VPC
    Type: CommaDelimitedList
  CidrIngress:
    Description: The CIDR to use for ingress access from public traffic
    Type: String
  WorkerImage:
    Description: The Docker image to pull for the handel-worker
    Type: String
  SshBastionSg:
    Description: The Security Group of the SSH Bastion in the VPC
    Type: String
Resources:
  EfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
      - Key: Name
        Value:
          Ref: AWS::StackName
  EfsMountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: The security group for the EFS mount targets 
      VpcId:
        Ref: VpcId
  EfsMountTargetSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: EfsMountTargetSecurityGroup
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId:
        Ref: Ec2SecurityGroup
  EfsMountAvailA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: EfsFileSystem
      SecurityGroups:
      - Ref: EfsMountTargetSecurityGroup
      SubnetId: !Select ["0", !Ref DataSubnets]
  EfsMountAvailB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: EfsFileSystem
      SecurityGroups:
      - Ref: EfsMountTargetSecurityGroup
      SubnetId: !Select ["1", !Ref DataSubnets]
  Ec2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: Ec2IamRole
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: The security group for the ec2 instances
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - FromPort: 22
        ToPort: 22
        IpProtocol: tcp
        SourceSecurityGroupId: 
          Ref: SshBastionSg
  Ec2LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
    - EfsFileSystem
    - EfsMountAvailA
    - EfsMountAvailB
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile:
        Ref: Ec2InstanceProfile
      ImageId:
        Ref: AmiImageId
      InstanceMonitoring: false
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Ref: Ec2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "Mounting EFS"
          yum install -y nfs-utils
          mkdir -p /mnt/share/handel-worker
          mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${EfsFileSystem}.efs.us-west-2.amazonaws.com:/ /mnt/share/handel-worker
          echo "Finished Mounting EFS"
          echo "Installing Docker"
          yum install -y docker
          service docker start
          usermod -a -G docker ec2-user
          echo "Finished installing Docker"
          echo "Launching application"
          eval "$(aws ecr get-login --region us-west-2)"
          docker pull ${WorkerImage}:latest
          docker run -d -p 5000:5000 -v /mnt/share/handel-worker:/mnt/share/handel-worker ${WorkerImage}:latest
          echo "Started application"
      KeyName:
        Ref: KeyName
  Ec2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: 300
      DesiredCapacity:
        Ref: NumInstances
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchConfigurationName:
        Ref: Ec2LaunchConfiguration
      MaxSize:
        Ref: NumInstances
      MinSize:
        Ref: NumInstances
      VPCZoneIdentifier:
        Ref: PrivateSubnets
      LoadBalancerNames:
      - Ref: Elb
  ElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ELB
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
  Ec2IngressFromElb:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: ElbSecurityGroup
    Properties:
      GroupId:
        Ref: Ec2SecurityGroup
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: ElbSecurityGroup
  Elb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      Listeners:
      - LoadBalancerPort: 80
        InstancePort: 5000
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:5000/healthcheck
        HealthyThreshold: 3
        UnhealthyThreshold: 5
        Interval: 30
        Timeout: 5
      LoadBalancerName:
        Ref: AWS::StackName
      SecurityGroups:
      - Ref: ElbSecurityGroup
      Subnets:
        Ref: PublicSubnets
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
Outputs:
  ElbDns:
    Description: The DNS name of the ELB
    Value: !GetAtt Elb.DNSName
